openapi: 3.0.1
info:
  title: <%= appName %> API
  description: |
    API documentation for <%= appName %> Rails application.

    This API provides:
    - Authentication endpoints (JWT-based)
    - GraphQL endpoint
    - Health check and status endpoints

    ## Authentication
    Most endpoints require authentication via JWT token. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```

    ## GraphQL
    The GraphQL endpoint is available at `/graphql` and supports queries and mutations.

  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.example.com
    description: Production server

paths:
  /:
    get:
      summary: API Root
      description: Get API information and available endpoints
      tags:
        - Status
      responses:
        '200':
          description: API information
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Welcome to <%= appName %> API"
                  version:
                    type: string
                    example: "1.0.0"
                  environment:
                    type: string
                    example: "development"
                  timestamp:
                    type: string
                    format: date-time
                  endpoints:
                    type: object
                    properties:
                      graphql:
                        type: string
                        example: "/graphql"
                      health:
                        type: string
                        example: "/health"
                      graphiql:
                        type: string
                        example: "/graphiql"

  /health:
    get:
      summary: Health Check
      description: Check if the API is running and healthy
      tags:
        - Status
      responses:
        '200':
          description: API is healthy
          content:
            text/plain:
              schema:
                type: string
                example: "OK"

  /auth/login:
    post:
      summary: User Login
      description: Authenticate user and return JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
                  user:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: "Login successful"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid email or password"

  /auth/register:
    post:
      summary: User Registration
      description: Register a new user and return JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user
              properties:
                user:
                  type: object
                  required:
                    - email
                    - name
                    - password
                    - password_confirmation
                  properties:
                    email:
                      type: string
                      format: email
                      example: "user@example.com"
                    name:
                      type: string
                      example: "John Doe"
                    password:
                      type: string
                      format: password
                      example: "password123"
                    password_confirmation:
                      type: string
                      format: password
                      example: "password123"
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
                  user:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: "Registration successful"
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Registration failed"
                  details:
                    type: array
                    items:
                      type: string
                    example: ["Email has already been taken"]

  /auth/me:
    get:
      summary: Get Current User
      description: Get information about the currently authenticated user
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Authentication required"

  /auth/logout:
    post:
      summary: User Logout
      description: Logout the current user (client-side token removal)
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"

  /auth/refresh:
    post:
      summary: Refresh Token
      description: Generate a new JWT token for the current user
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: New JWT token
                  message:
                    type: string
                    example: "Token refreshed"

  /graphql:
    post:
      summary: GraphQL Endpoint
      description: Execute GraphQL queries and mutations
      tags:
        - GraphQL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                  description: GraphQL query or mutation
                  example: |
                    query {
                      health
                    }
                variables:
                  type: object
                  description: GraphQL variables
                  example: {}
                operationName:
                  type: string
                  description: GraphQL operation name
      responses:
        '200':
          description: GraphQL response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    description: GraphQL response data
                  errors:
                    type: array
                    items:
                      type: object
                    description: GraphQL errors (if any)

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: "user@example.com"
        name:
          type: string
          example: "John Doe"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        created_at_formatted:
          type: string
          example: "2024-01-01 12:00:00"
        updated_at_formatted:
          type: string
          example: "2024-01-01 12:00:00"
      required:
        - id
        - email
        - name
        - created_at
        - updated_at

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token for authentication.

        Include the token in the Authorization header:
        ```
        Authorization: Bearer <your-jwt-token>
        ```

tags:
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: GraphQL
    description: GraphQL query and mutation endpoints
  - name: Status
    description: API status and health check endpoints
